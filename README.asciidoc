////////////////////////////////////////////////////////////////////////////////
Copyright (c) 2012, THE BOARD OF TRUSTEES OF THE LELAND STANFORD JUNIOR UNIVERSITY
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

   Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
   Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
   Neither the name of the STANFORD UNIVERSITY nor the names of its contributors
   may be used to endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////

A sample *DevOps deployment build* Gradle workspace that builds, packages, backs up, deploys and rolls back this workspace on one to N remote nodes
running the default installation of the Cyclades Service Engine.

[NOTE]
Please see https://github.com/cycladessoa/cyclades-deployment to deploy a default Cyclades Service Engine installation.

== Overview and Basic Features

This is a sample deployment build to be used as an example of how to utilize Cyclades SOA and Gradle for DevOps tasks. The following
can be accomplished with this workspace:

* Build and archive a sample Java application along with library dependencies, configuration files and any other resources provided in the "include" directory
* Deploy the archive to designated remote nodes/servers
* Install the artifacts on the remote nodes/servers
* Test/verify the installations, both for deployment and roll back 
* Back up a previous installation
* Roll back and installation from a previously backed up version

This workspace is intended to serve as a trivial example of concepts that can be utilized for much more complex build and deployment
scenarios. This template can be copied and modified as necessary to realize your requirements. For example, a Java build
and the Java code may not be needed in your workspace, you may only want to fetch dependencies from Maven and include them
in your archive along with all your configurations, scripts, binaries etc. for your installation.

== Prerequisites

The Cyclades Service Engine must be up and running on the nodes/servers that you wish to manage. Installing on the same machine from where you run this
build should work with no modifications. This should work on both *nix and Windows machines. If you are deploying to nodes/servers
other than the same one that you are running this build from (localhost) you must modify the property "engines" in the file "gradle.properties"
and enter the correct Cyclades URL/s for your target machine/s. You can specify one to N nodes/servers for deployment, as the "engines" property is a comma
separated list of Cyclades Service Engine URLs.

You will need to have Gradle installed on the machine that you run this example from. You will also need to have Java installed
to get a successful response from the test phase of the installation orchestration (though the build will still work).

[NOTE]
Please see https://github.com/cycladessoa/cyclades-deployment to deploy a default Cyclades Service Engine installation.

== Instructions/Examples

=== Gradle Tasks

* clean
    ** Deletes the build directory
* build
    ** Assembles and tests this project
* backup
    ** Backup the current installation remotely on the specified Cyclades Service Engine nodes in the node_list property, via provided HTTP APIs
* deploy
    ** Upload, install and test this deployment build remotely on the specified Cyclades Service Engine nodes in the node_list property, via provided HTTP APIs
* rollBack
    ** Roll back and test a previously installed deployment build remotely on the specified Cyclades Service Engine nodes in the node_list property, via provided HTTP APIs. NOTE: You must specify the property "backup_tid" with the tid value from a previously run "backup" task: -Pbackup_tid=xxx

[NOTE]
The command "gradle tasks" will display all of the available tasks of a Gradle build workspace...however the above tasks apply directly to this example
A deployment build command typically start with "gradle clean build" so that the assembled deployment artifact (archive) is current. 
Exceptions will be if and when "gradle backup" and "gradle rollBack" are run alone. 

=== Build, deploy, install and test the artifacts on the designated nodes/servers

gradle clean build deploy

=== Build, backup, deploy, install and test the artifacts on the designated nodes/servers (a previous installation must be present for a "backup" task to succeed, otherwise it will throw an error)

gradle clean build backup deploy

=== To roll back a to a previously backed up deployment (you must specifiy the tid of a previous "backup" execution as the command line property "backup_tid")

gradle -Pbackup_tid=DEVOPS-DEPLOYMENT-BUILD-CLIENT-HOST-NAME-1364336231693 rollBack

[NOTE]
The "backup_tid" value is diplayed by the "backup" task every time it is run. You can try running "gradle backup" alone to test this feature.

== Naming

=== Terms

* *STROMA*: (protocol) Service TRansaction Orchestration Messaging Architecture
* *X-STROMA*: (protocol) "Trans", or "across" STROMA
* *Nyxlet*: A service module that is pluggable into the Cyclades Service Engine

=== Etymons

* *"Stroma"*: _Wikipedia_ (animal tissue), the connective, functionally supportive framework of a biological cell, tissue, or organ
* *"Nyx"*: _Wikipedia_ (Νύξ, "night") – Nox in Latin translation – is the Greek goddess (or personification) of the night. A shadowy figure, Nyx stood at or near the beginning of creation, and was the mother of other personified gods such as Hypnos (Sleep) and Thánatos (Death)


